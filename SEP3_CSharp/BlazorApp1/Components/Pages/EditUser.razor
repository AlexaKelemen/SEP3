@page "/EditUser"

@using System.Security.Claims
@using DataTransferObjects
@using Entities
@using Managers
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject IManager Manager

<PageTitle>Edit User</PageTitle>


<AuthorizeView>
    <Authorized>
        <h1>Hello </h1>

        <h3>User Information</h3>
        <p><label>First name:</label>
            <input type="text" @bind="firstName"/></p>
        <p><label>Last name:</label>
            <input type="text" @bind="lastName"/></p>
        <p><label>Username:</label>
            <input type="text" @bind="username"/></p>
        <p><label>Email:</label>
            <input type="text" @bind="email"/></p>
        <p><label>Address:</label>
            <input type="text" @bind="address"/></p>
        <p><label>Card information:</label>
            <label>@paymentInfo</label>  <button type="button" class="btn btn-primary" @onclick="ChangeCard">Change card </button></p>

        @if (isPopupVisible)

        {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5> Change card</h5>
                        <button type="button" class="btn btn-primary" @onclick="ClosePopup">Close</button>
                        <button type="button" class="btn btn-primary" @onclick="SaveCard">Save card</button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="newCard" Context="editcard">

                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label>First name</label>
                                <Input @bind="newCard.FirstName"/>
                            </div>

                            <div class="mb-3">
                                <label>Last name</label>
                                <Input @bind="newCard.LastName"/>
                            </div>

                            <div class="mb-3">
                                <label>Card Number</label>
                                <Input @bind="newCard.CardNumber"/>
                            </div>
                            <div class="mb-3">
                                <label>Date</label>
                                <InputDate @bind-Value="newCard.ExpirationDate" />
                            </div>
                            <div class="mb-3">
                                <label>Cvc</label>
                                <InputNumber @bind-Value="newCard.Cvc"/>
                            </div>

                            <button type="button" class="btn btn-primary" @onclick="ClosePopup">Close</button>
                            <button type="button" class="btn btn-primary" @onclick="SaveCard">Save card</button>

                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>

        }
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private string username;
    private string? email;
    private string? firstName;
    private string? lastName;
    private string? address;
    private string? paymentInfo;
    private string? errorLabel;
    private User user;
    private Card? cardOnProfile;
    private CardDTO newCard;
    private bool isPopupVisible, isDeletePopupVisible = false;



    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            // the user is not logged in
            return;
        }
        
        username = claimsPrincipal.Identity?.Name;
        user = await Manager.GetUser(username);
            email = user.Email;
            firstName = user.FirstName;
            lastName = user.LastName;
            address = user.Address;
            cardOnProfile = user.Card;
            paymentInfo = cardOnProfile.CardNumber;

        IEnumerable<Claim> claims = claimsPrincipal.Claims;
    }

    private async Task SaveChanges()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (!string.IsNullOrEmpty(username))
        {
            
        }
    }

    private void ChangeCard()

    {
        newCard = new CardDTO()
        {
            CardNumber = cardOnProfile.CardNumber,
            Cvc = cardOnProfile.Cvc,
            ExpirationDate = cardOnProfile.ExpirationDate,
            FirstName = cardOnProfile.FirstName,
            LastName = cardOnProfile.LastName
        }; 
        isPopupVisible = true;

    }

    private void ClosePopup()
    {
        isPopupVisible = false;
    }

    private async Task SaveCard()
    {
        ClosePopup();
    }

}