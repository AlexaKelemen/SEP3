@page "/EditUser"

@using System.Security.Claims
@using DataTransferObjects
@using Entities
@using Managers
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject IManager Manager

<PageTitle>Edit User</PageTitle>


<AuthorizeView>
    <Authorized>
        <h1>Hello @username</h1>

        <h3>User Information</h3>
        <p><label>First name:</label>
            <input type="text" @bind="firstName"/></p>
        <p><label>Last name:</label>
            <input type="text" @bind="lastName"/></p>
        <p><label>Email:</label>
            <input type="text" @bind="email"/></p>
        <p><label>Address:</label>
            <input type="text" @bind="address"/></p>
        <p><label>Card information:</label>
            <label>@paymentInfo</label>  <button type="button" class="btn btn-primary" @onclick="ChangeCard">Change card </button></p>
        <button type="button" class="btn btn-primary" @onclick="SaveChanges">Save</button>
        <p><label style="color: red"> @errorLabel </label></p>

        @if (isPopupVisible)

        {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5> Change card</h5>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="user" Context="editcard">

                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label>First name</label>
                                <input type="text" @bind="cardFirstName"/>
                            </div>

                            <div class="mb-3">
                                <label>Last name</label>
                                <input type="text" @bind="cardLastName"/>
                            </div>

                            <div class="mb-3">
                                <label>Card Number</label>
                                <input type="text" @bind="cardNumber"/>
                            </div>
                            <div class="mb-3">
                                <label>Date</label>
                                <InputDate @bind-Value="cardExpirationDate" />
                            </div>
                            <div class="mb-3">
                                <label>Cvc</label>
                                <input type="text" @bind="cardCvc"/>
                            </div>

                            <button type="button" class="btn btn-primary" @onclick="ClosePopup">Close</button>
                            <button type="button" class="btn btn-primary" @onclick="SaveCard">Save card</button>
                            <p><label style="color: red"> @popupError </label></p>

                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>

        }
    </Authorized>
    <NotAuthorized>
        <p>You are not logged in</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private string username;
    private string? email;
    private string? firstName;
    private string? lastName;
    private string? address;
    private string? paymentInfo;
    private string? errorLabel;
    private string popupError;
    private string cardFirstName;
    private string cardLastName;
    private string cardCvc;
    private string cardNumber;
    private DateOnly cardExpirationDate;
    private User user;
    private Card? cardOnProfile;
    private bool isPopupVisible, isDeletePopupVisible = false;



    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            // the user is not logged in
            return;
        }
       
        username = claimsPrincipal.Identity?.Name;
        user = await Manager.GetUser(username);
        
            email = user.Email;
            firstName = user.FirstName;
            lastName = user.LastName;
            address = user.BillingAddress;
            cardOnProfile = user.Card;
            if (user.Card != null)
            {
                paymentInfo = cardOnProfile.CardNumber;
            }

            errorLabel = "";
            IEnumerable<Claim> claims = claimsPrincipal.Claims;
    }

    private async Task SaveChanges()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        UserDTO userUpdate = new UserDTO()
        {
            BillingAddress = address,
            Card = cardOnProfile,
            Email = email,
            FirstName = firstName,
            LastName = lastName,
            Username = username
        };
        try
        {
            await Manager.SaveUserInfo(userUpdate);
        }
        catch (Exception e)
        {
            errorLabel = ($"Error: {e.Message}");
            Console.WriteLine(e);
        }
        
    }

    private void ChangeCard()

    {
        errorLabel = "";   
        if (cardOnProfile != null)
        {
            cardNumber = cardOnProfile.CardNumber;
            cardFirstName = cardOnProfile.FName;
            cardLastName = cardOnProfile.LName;
            cardCvc = cardOnProfile.Cvc;
            cardExpirationDate = cardOnProfile.ExpirationDate;
        }
        else
        {
            cardOnProfile = new Card();
        }
        isPopupVisible = true;

    }

    private void ClosePopup()
    {
        isPopupVisible = false;
    }

    private void SaveCard()
    { if (string.IsNullOrEmpty(cardNumber) || cardNumber.Length != 16 || !IsDigitsOnly(cardNumber))
        {
            popupError = "Card number must be exactly 16 digits.";
        }
        else if (string.IsNullOrEmpty(cardCvc) || cardCvc.Length != 3 || !IsDigitsOnly(cardCvc))
        {
            popupError = "Cvc must be exactly 3 digits.";
        }
        else
        {
            cardOnProfile.CardNumber = cardNumber;
            cardOnProfile.FName = cardFirstName;
            cardOnProfile.LName = cardLastName;
            cardOnProfile.Cvc = cardCvc;
            cardOnProfile.ExpirationDate = cardExpirationDate;

            ClosePopup();
        }
    }
    
     private bool IsDigitsOnly(string str)
    {
        foreach (char c in str)
        {
            if (!char.IsDigit(c))
            {
                return false;
            }
        }
        return true;
    }

}