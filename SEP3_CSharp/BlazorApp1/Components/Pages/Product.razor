@page "/Product"
@using System.Collections
@using BlazorApp1.Managers
@using ItemDTO = DataTransferObjects.ItemDTOs
@using DataTransferObjects
@using Entities
@using Entities.Utilities
@inject IManager Manager
@inject NavigationManager NavigationManager


<div>
    <label>Filter your search:   </label>
    <select class="filterCategories" @onchange="args => FilterProducts(args)">
        @foreach (Category category in categories)
        {
            <option value=@category.CategoryName>@category.CategoryName</option>
        }
        <option value="clear">Clear</option>
    </select>
</div>
@if (Items == null)
{
    <h3>No products can be displayed right now, sorry for the inconvenience</h3>
}
else
{
    <h3 class="mb-5">Products</h3>
    var productCount = Items.Count();
    @if (productCount > 0)
    {
        const int itemsPerRow = 4;
        var productsRowList = new List<ItemDTO>();

        @for (int i = 0; i < productCount; i++)
        {
            productsRowList = Items.Skip(i * itemsPerRow).Take(itemsPerRow).ToList();
            <div class="row mt-3">
                <DisplayProducts Products="@productsRowList"></DisplayProducts>
            </div>
        }
    }
}


@code 
{
    
    private IEnumerable<ItemDTOs> Items{ get; set; }
    private IEnumerable<Category> categories = new List<Category>();
    private IEnumerable<ItemCategory> itemCategories = new List<ItemCategory>();
    

    protected override async Task OnInitializedAsync()
    {
        Items = await Manager.GetItemsAsync();
        categories = await Manager.GetCategoriesAsync();
        itemCategories = await Manager.GetItemCategoriesAsync();
    }

    private async Task FilterProducts(ChangeEventArgs args)
    {
        string category = (string)args.Value;
        await ClearFilters();
        List<ItemDTO> temp = new List<ItemDTO>();
        if (category.Equals("clear"))
        {
            await ClearFilters();
        }
        else
        {
            foreach (var cat in categories)
            {
                if (category.Equals(cat.CategoryName))
                {
                    foreach (var itemCat in itemCategories)
                    {
                        if (cat.CategoryId == itemCat.CategoryId)
                        {
                            foreach (var item in Items)
                            {
                                if (item.ItemId == itemCat.ItemId)
                                    temp.Add(item);
                            }
                        }
                    }
                }
            }
            Items = temp;
        }

    
    }

    private async Task ClearFilters()
    {
        Items = await Manager.GetItemsAsync();
    }
}