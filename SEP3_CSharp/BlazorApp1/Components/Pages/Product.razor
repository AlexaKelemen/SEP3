@page "/Product"
@using System.Collections
@using BlazorApp1.Managers
@using ItemDTO = DataTransferObjects.ItemDTOs
@using DataTransferObjects
@using Entities
@using Entities.Utilities
@inject IManager Manager
@inject NavigationManager NavigationManager

<h3 class="mb-5">Products</h3>

@if (ShowFilter)
{
    <div>
        <label>Filter your search: </label>
        <select class="filterCategories" @onchange="args => FilterProducts(args)">
            @foreach (Category category in categories)
            {
                <option value=@category.CategoryName>@category.CategoryName</option>
            }
            <option value="clear">Clear</option>
        </select>
    </div>
}


@if (IsLoading)
{
    <h6><i>No products can be displayed right now, sorry for the inconvenience</i></h6>
    <div class="lds-heart"><div></div></div>
}
else
{
    const int itemsPerRow = 4;

    @for (int i = 0; i < Items.Count(); i += itemsPerRow)
    {
        var productsRowList = Items.Skip(i).Take(itemsPerRow).ToList();
        <div class="row mt-3">
            @foreach (var product in productsRowList)
            {
                <div class="col-md-3">
                    <a href="@($"/ProductDetails/{product.ItemId}")" class="card">
                        <img src="@product.ImageUrl" alt="@product.Name" class="img-fluid"/>
                        <div class="card-body">
                            <h5>@product.Name</h5>
                            <p>@product.Description</p>
                        </div>
                    </a>
                </div>
            }
        </div>
    }


@code 
{
    
    private IEnumerable<ItemDTOs> Items{ get; set; }
    private IEnumerable<Category> categories = new List<Category>();
    private IEnumerable<ItemCategory> itemCategories = new List<ItemCategory>();
    private bool IsLoading { get; set; } = true;
    private bool ShowFilter { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await Task.Delay(1000);
        
        Items = await Manager.GetItemsAsync();
        categories = await Manager.GetCategoriesAsync();
        itemCategories = await Manager.GetItemCategoriesAsync();
        
        IsLoading = false;
        ShowFilter = true;
    }

    private async Task FilterProducts(ChangeEventArgs args)
    {
        string category = (string)args.Value;
        await ClearFilters();
        List<ItemDTO> temp = new List<ItemDTO>();
        if (category.Equals("clear"))
        {
            await ClearFilters();
        }
        else
        {
            foreach (var cat in categories)
            {
                if (category.Equals(cat.CategoryName))
                {
                    foreach (var itemCat in itemCategories)
                    {
                        if (cat.CategoryId == itemCat.CategoryId)
                        {
                            foreach (var item in Items)
                            {
                                if (item.ItemId == itemCat.ItemId)
                                    temp.Add(item);
                            }
                        }
                    }
                }
            }
            Items = temp;
        }

    
    }

    private async Task ClearFilters()
    {
        Items = await Manager.GetItemsAsync();
    }
}
}