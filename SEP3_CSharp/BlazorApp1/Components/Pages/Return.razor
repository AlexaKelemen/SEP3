@page "/Return"
@using System.Security.Claims
@using BlazorApp1.Managers
@using Entities

@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject IManager Manager



<AuthorizeView>
    <Authorized>
@if (Orders == null)
{
    <h3>No products can be displayed right now. Sorry.</h3>
}
else
{
  
    var orderCount = Orders.Count();
    @if (orderCount > 0)
    {
        const int ordersPerRow = 4;
        var orderRowList = new List<Order>();

        @for (int i = 0; i < orderCount; i++)

            orderRowList = Orders.Skip(i * ordersPerRow).Take(ordersPerRow).ToList();
        @foreach (var order in orderRowList)
        {
            <div class="col-md-3">
                <a href="@($"/OrderDetails/{order.OrderId}")" class="card">
                    <img src="@Manager.GetProductByIdAsync(order.Items[0].ItemId)"  class="img-fluid"/>
                    <div class="card-body">
                        <h5>@order.Items.Count products in order</h5>
                    </div>
                </a>
            </div>
        }
    }
}
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to view orders</p>
    </NotAuthorized>
</AuthorizeView>
@code 
{
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private IEnumerable<Order> Orders { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            // the user is not logged in
            return;
        }
        Orders = await Manager.GetAllOrdersForUser(claimsPrincipal.Identity?.Name);
    }

    
}