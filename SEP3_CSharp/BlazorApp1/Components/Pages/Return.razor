@page "/Return"
@using System.Security.Claims
@using BlazorApp1.Managers
@using Entities

@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.IdentityModel.Tokens
@inject AuthenticationStateProvider AuthProvider
@inject IManager Manager



<AuthorizeView>
    <Authorized>
@if (Orders.IsNullOrEmpty() || Orders.Count() == 0)
{
    <h3>No products can be displayed right now. Sorry.</h3>
}
else
{
        const int ordersPerRow = 4;
        
        @for (int i = 0; i < Orders.Count(); i += ordersPerRow)
        {
            var orderRowList =  Orders.Skip(i * ordersPerRow).Take(ordersPerRow).ToList();
            <div class="row mt-3">
            @foreach (var order in orderRowList)
            {
                <div class="col-md-3">
                    <a href="@($"/OrderDetails/{order.OrderId}")" class="card">
                        <div class="card-body">
                            <h5>Order: @order.OrderId</h5>
                            <h5>Placed on: @order.PlacedOn</h5>
                            <h5>@order.Items.Count product(s) in order</h5>
                        </div>
                    </a>
                </div>
            }
            </div>
        }
}
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to view orders</p>
    </NotAuthorized>
</AuthorizeView>
@code 
{
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    private IEnumerable<Order> Orders { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            // the user is not logged in
            return;
        }
        Orders = await Manager.GetAllOrdersForUser(claimsPrincipal.Identity?.Name);
    }

    
}