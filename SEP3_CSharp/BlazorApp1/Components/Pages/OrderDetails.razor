@page "/OrderDetails/{Id:int}"
@using System.Security.Claims
@using BlazorApp1.Managers
@using Entities
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavMgr;
@inject IManager Manager
<h3>OrderDetails</h3>





@if (Order == null && ErrorMessage == null)
{
    <DisplaySpinner/>
}
else if (ErrorMessage != null)
{
    <DisplayError ErrorMessage="@ErrorMessage"></DisplayError>
}
else
{
    <div class="container mt-5">
        <h2 class="text-center mb-5">Product Details</h2>
        <div class="row g-4">
            
            @foreach (var item in Order.Items)
            {
                string text;
                float price;
                if (Order.IsNew())
                {
                    text = "Price for refund: ";
                    price = CalculatePrice(item, quantities[item]);
                }
                else
                {
                    text = "Credit for return: ";
                    price = @CalculateCredit(item, quantities[item]);
                }
                <div class="card p-4 shadow-lg">
                    <h3 class="card-title">@item.Name</h3>
                    <p class="card-text text-muted">Size: @item.Size</p>
                    <p class="card-text text-muted">Colour: @item.Colour</p>
                    <input type="number" @bind="quantities[item]" min="0" max="@item.Quantity"/>
                    <p class="card-text text-muted">@text  @price</p>
                    <Button type="button"  class="btn btn-primary btn-sm" @onclick="() => AddChanges(item, quantities[item])" > Add changes </Button>
                    <div></div></div>
            }
            <Button type="button" class="btn btn-primary" @onclick="ProcessReturn"> Process Return </Button>
            
        </div>
    </div>
    @if (isPopupVisible)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 style="font-family: Apple chancery, cursive"> Change card</h5>
                    </div>
                    <div class="modal-body">
                        <h4>Thank you for your return!</h4>
                        <p>Your return will now be processes.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" @onclick="ClosePopup">Ok</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
}



@code 
{
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    [Parameter] public int Id { get; set; }
    public Order Order;
    public string ErrorMessage { get; set; }
    List<Item> items;
    int credit = 0;
    private Dictionary<int, String> Urls;
    private bool isPopupVisible;
    private Dictionary<Item, int> quantities;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        IEnumerable<Order> temp = await Manager.GetAllOrdersForUser(claimsPrincipal.Identity?.Name);
        foreach (var order in temp)
        {
            if (order.OrderId == Id)
                Order = order;
        }
        items = Order.Items;
        isPopupVisible = false;
        quantities = new Dictionary<Item, int>();
        foreach (var item in Order.Items)
        {
            quantities.Add(item, item.Quantity);
        }
    }

    public float CalculatePrice(Item item, int quantity)
    {
        return item.Price * quantity;
    }
   
    public int CalculateCredit(Item item, int quantity)
    {
        return Convert.ToInt16(item.Price * 5 / 100)*quantity;
    }

    public void AddChanges(Item item, int quantity)
    {
        foreach (var product in Order.Items)
        {
            if (item.ItemId == product.ItemId)
            {
                Order.Items.Remove(product);
                break;
            }
                
        }

        if (item.Quantity - quantity > 0)
        {
            item.Quantity -= quantity;
            items.Add(item);
        }

        if (Order.IsNew())
        {
            credit += CalculateCredit(item, quantity);
        }
    }

    public async Task ProcessReturn()
    {
        float total = 0;
        foreach (var item in items)
        {
            total += item.Price * item.Quantity;
        }
        
        if (Order.IsNew())
        {
            Order.Price = total;
            await Manager.RefundOrderAsync(Order);

        }
        else
        {
            await Manager.ReturnOrderAsync(Order, credit);
        }

        isPopupVisible = true;
    }

    public void ClosePopup()
    {
        isPopupVisible = false;
        NavMgr.NavigateTo("/");
    }
}