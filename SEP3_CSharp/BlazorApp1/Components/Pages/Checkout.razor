@page "/Checkout"
@using System.ComponentModel
@using System.Security.Claims
@using BlazorApp1.Managers
@using DataTransferObjects
@using Entities
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthProvider
@inject IManager Manager
@inject NavigationManager NavigationManager

<PageTitle>Checkout</PageTitle>
<h1>@total.ToString("C", new System.Globalization.CultureInfo("en-DK"))</h1>
<AuthorizeView>
    <Authorized>
        <p>Hello @context.User.Identity.Name</p>
    </Authorized>
</AuthorizeView>
<div class="mb-3">
    <label>First name</label>
    <input type="text" @bind="cardFirstName" />
</div>

<div class="mb-3">
    <label>Last name</label>
    <input type="text" @bind="cardLastName" />
</div>

<div class="mb-3">
    <label>Card Number</label>
    <input type="text" @bind="cardNumber" />
</div>
<div class="mb-3">
    <label>Date</label>
    <InputDate @bind-Value="cardExpirationDate" />
</div>
<div class="mb-3">
    <label>Cvc</label>
    <input type="text" @bind="cardCvc" />
</div>

<div class="mb-3">
    <label>Delivery Option</label>
    <select class="form-select" @bind="selectedDeliveryOption">
        <option value="HomeDelivery">Home Delivery</option>
        <option value="PickupLocation">Pickup Location</option>
    </select>
</div>


@if (selectedDeliveryOption == "HomeDelivery")
{
    <div class="mb-3">
        <label>Country</label>
        <input type="text" @bind="deliveryCountry" />
    </div>
    <div class="mb-3">
        <label>Town</label>
        <input type="text" @bind="deliveryTown" />
    </div>
    <div class="mb-3">
        <label>Street</label>
        <input type="text" @bind="deliveryStreet" />
    </div>
    <div class="mb-3">
        <label>Number</label>
        <input type="text" @bind="deliveryNumber" />
    </div>
   
    
}

<!-- Pickup Location Options -->
@if (selectedDeliveryOption == "PickupLocation")
{
    <div class="mb-3">
        <label>Pickup Location</label>
        <select class="form-select" @bind="selectedPickupLocation">
            <option value="Location1">Central Post Office</option>
            <option value="Location2">City Mall</option>
            <option value="Location3">Train Station</option>
            <option value="Location4">University Campus</option>
        </select>
    </div>
}

<button type="button" class="btn btn-primary" @onclick="CheckoutItems">Checkout</button>

@code {
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }

    private decimal total;
    private string? cardFirstName;
    private string? cardLastName;
    private string? cardCvc;
    private string? cardNumber;
    private DateOnly? cardExpirationDate;

    private string selectedDeliveryOption = "HomeDelivery"; // Default option
    private string? deliveryTown;
    private string? deliveryStreet;
    private string? deliveryNumber;
    private string? deliveryCountry;
    private string? selectedPickupLocation;

    private User? user;

    protected override async Task OnInitializedAsync()
    {
        user = new User();
        total = (decimal)Manager.GetTotal();
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
        {
            return;
        }

        user = await Manager.GetUserAsync(claimsPrincipal.Identity?.Name);
        cardFirstName = user.Card.FName;
        cardLastName = user.Card.LName;
        cardCvc = user.Card.Cvc;
        cardNumber = user.Card.CardNumber;
        cardExpirationDate = user.Card.ExpirationDate;
    }

    private async Task<bool> CheckoutItems()
    {
        DeliveryOption deliveryOption;

        if (selectedDeliveryOption == "HomeDelivery")
        {
            deliveryOption = new DeliveryOption
            {
                Id = 1,
                Name = $"Home Delivery: {deliveryStreet} {deliveryNumber}, {deliveryTown}, {deliveryCountry}, ", 
                OrderId = -1
            };
        }
        else
        {
            deliveryOption = new DeliveryOption
            {
                Id = 2,
                Name = $"Pickup Location: {selectedPickupLocation}", // Use pickup location directly
                OrderId = -1
            };
        }

        Order order = new Order
        {
            DeliveryOptions = new List<DeliveryOption> { deliveryOption },
            OrderId = -1,
            PaymentMethod = new PaymentMethod
            {
                Id = 1,
                Name = "Card"
            },
            PlacedBy = user,
            PlacedOn = DateTime.Now,
            Price = (double)total
        };

        return await Manager.CheckoutAsync(order);
    }

}
