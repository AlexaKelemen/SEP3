@using BlazorApp1.Managers
@using BlazorApp1.Services.Contracts;
@using Entities;
@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;
@inject IManager Manager;
@inject IJSRuntime Js
@inject NavigationManager NavMgr
@page "/ShoppingCart"

<PageTitle>ShoppingCart</PageTitle>

@if (CartItems != null && CartItems.Count > 0)
{
    <h3 class="mb-5" style="font-family: Apple chancery, cursive">Shopping Cart</h3>
    <div class="row mb-5">
        <div class="col-md-9">

            @foreach (var item in CartItems)
            {
            var cartItem = item.Key; 

            <div class="row mb-4">
                <div class="col-md-4">
                    <img src="@cartItem.ImageURL" alt="@cartItem.Name" class="img-thumbnail" />
                </div>
                <div class="col-md-8">
                    <h5>@cartItem.Name</h5>
                    <p>@cartItem.Description</p>
                    <p>Price: <b>@cartItem.Price.ToString("C", new System.Globalization.CultureInfo("en-DK"))</b></p>
                    <p>Quantity:</p>
                    <input type="number" 
                           min="1"
                           value="@item.Value"
                           @oninput="@(e => OnQuantityInput(cartItem, e.Value.ToString()))"/>
                    <button class="btn btn-danger sm"
                            @onclick="(() => RemoveFromCart(cartItem))">
                        <i class="fa fa-trash"></i> Remove
                    </button>
                </div>
            </div>
            }
</div>
        <div class="col-md-3">
            <h5>Cart Summary</h5>
            <div class="mt-2">
                <div>Total: <b>@CartTotal.ToString("C", new System.Globalization.CultureInfo("en-DK"))</b></div>
                <button class="btn btn-success" @onclick="Checkout">
                    <span class="oi oi-credit-card"></span>&nbsp; Proceed to Checkout
                </button>
            </div>
        </div>
    </div>
}
else
{
    <h4>Your shopping cart is currently empty.</h4>
}
@code
{
    private Dictionary<Item, int> CartItems;

    private decimal CartTotal => (decimal)CartItems.Sum(entry => entry.Key.Price * entry.Value);

    protected override async Task OnInitializedAsync()
    {
        CartItems = Manager.GetCartItems() ?? new Dictionary<Item, int>();
    }

    private void OnQuantityInput(Item item, string value)
    {
        if (int.TryParse(value, out int quantity))
        {
            if (quantity < 1) 
            {
                quantity = 1; 
            }
            CartItems[item] = quantity;
            Manager.ChangeItemQuantity(item, quantity);
        }
    }

    private void UpdateQuantity(Item item, int quantity)
    {
        if (quantity < 1)
        {
            CartItems[item] = 1; 
        }
        else
        {
            CartItems[item] = quantity;
        }
    }

    private void RemoveFromCart(Item item)
    {
        if (CartItems.ContainsKey(item))
        {
            CartItems.Remove(item);
            Manager.RemoveFromCart(item);
        }
    }

    private void Checkout()
    {
        NavMgr.NavigateTo("/Checkout");
        //CartItems.Clear();
        //StateHasChanged();
    }
}
