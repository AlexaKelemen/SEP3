// <auto-generated />
using System;
using DatabaseConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseConnection.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241206090537_Update")]
    partial class Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CategoryItem");
                });

            modelBuilder.Entity("Entities.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CardId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Entities.DeliveryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("DeliveryOptions");
                });

            modelBuilder.Entity("Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId");

                    b.ToTable("Items", (string)null);

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            Colour = "Blue",
                            Description = "Tired of painful soles? Try this now!",
                            ImageURL = "Images/Shoes/shoes1.png",
                            Name = "Comfy shoes",
                            Price = 10f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 2,
                            Colour = "Red",
                            Description = "Perfect fit for a runner",
                            ImageURL = "Images/Shoes/shoes2.png",
                            Name = "Running shoes",
                            Price = 5f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 3,
                            Colour = "Yellow",
                            Description = " Comfortable, long and flowy!",
                            ImageURL = "Images/Clothing/clothing1.jpg",
                            Name = "Summer dress",
                            Price = 15f,
                            Quantity = 100,
                            Size = "Large"
                        },
                        new
                        {
                            ItemId = 4,
                            Colour = "Grey",
                            Description = "Classic white lace up sneakers with a minimalist design",
                            ImageURL = "Images/Shoes/shoes4.png",
                            Name = "White Sneakers",
                            Price = 10f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 5,
                            Colour = "Red",
                            Description = "Beautiful blend from white to black",
                            ImageURL = "Images/Shoes/shoes5.png",
                            Name = "White and black ankle sneakers",
                            Price = 20f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 6,
                            Colour = "Brown",
                            Description = "Perfect for driving people away from your house",
                            ImageURL = "Images/accessories/Accessory21.png",
                            Name = "Amazing footmat",
                            Price = 30f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 7,
                            Colour = "Black",
                            Description = "Stylish glasses with black, round frames",
                            ImageURL = "Images/accessories/Accessory7.png",
                            Name = "Eyeglasses",
                            Price = 10f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 8,
                            Colour = "Brown",
                            Description = "Brown hand bag with reinforced handles",
                            ImageURL = "Images/accessories/Accessory11.png",
                            Name = "Small Hand bag",
                            Price = 27f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 9,
                            Colour = "White",
                            Description = "Perfect gift to give to lovers of ducks!",
                            ImageURL = "Images/accessories/Accessory14.png",
                            Name = "Funny ducks",
                            Price = 7f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 10,
                            Colour = "Black & White",
                            Description = "Good, durable quality",
                            ImageURL = "Images/accessories/Accessory19.png",
                            Name = "Funny clothespin",
                            Price = 5f,
                            Quantity = 100,
                            Size = "Small"
                        });
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlacedByUsername")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlacedOn")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PlacedByUsername");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Username");

                    b.HasIndex("CardId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entities.Utilities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.HasOne("Entities.Utilities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DeliveryOption", b =>
                {
                    b.HasOne("Entities.Order", "Order")
                        .WithMany("DeliveryOptions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.HasOne("Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "PlacedBy")
                        .WithMany()
                        .HasForeignKey("PlacedByUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("PlacedBy");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Navigation("DeliveryOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
