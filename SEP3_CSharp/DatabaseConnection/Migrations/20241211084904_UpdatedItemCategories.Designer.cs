// <auto-generated />
using System;
using DatabaseConnection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseConnection.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241211084904_UpdatedItemCategories")]
    partial class UpdatedItemCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("CategoryItem");
                });

            modelBuilder.Entity("Entities.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cvc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CardId");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Entities.DeliveryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("DeliveryOptions");
                });

            modelBuilder.Entity("Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ItemId");

                    b.ToTable("Items", (string)null);

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            Colour = "Blue",
                            Description = "Tired of painful soles? Try this now!",
                            ImageURL = "Images/Shoes/shoes1.png",
                            Name = "Comfy shoes",
                            Price = 210f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 2,
                            Colour = "Red",
                            Description = "Perfect fit for a runner",
                            ImageURL = "Images/Shoes/shoes2.png",
                            Name = "Running shoes",
                            Price = 700f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 3,
                            Colour = "Green",
                            Description = "Comfortable, long and flowy!",
                            ImageURL = "Images/Clothes/clothing1.jpg",
                            Name = "Summer dress",
                            Price = 540f,
                            Quantity = 100,
                            Size = "Large"
                        },
                        new
                        {
                            ItemId = 4,
                            Colour = "Grey",
                            Description = "Classic white lace-up sneakers with a minimalist design",
                            ImageURL = "Images/Shoes/shoes4.png",
                            Name = "White Sneakers",
                            Price = 1200f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 5,
                            Colour = "Red",
                            Description = "Beautiful blend from white to black",
                            ImageURL = "Images/Shoes/shoes5.png",
                            Name = "White and black ankle sneakers",
                            Price = 780f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 6,
                            Colour = "Brown",
                            Description = "Perfect for driving people away from your house",
                            ImageURL = "Images/accessories/Accessory21.png",
                            Name = "Amazing footmat",
                            Price = 280f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 7,
                            Colour = "Black",
                            Description = "Stylish glasses with black, round frames",
                            ImageURL = "Images/accessories/Accessory7.png",
                            Name = "Eyeglasses",
                            Price = 1003f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 8,
                            Colour = "Brown",
                            Description = "Brown hand bag with reinforced handles",
                            ImageURL = "Images/accessories/Accessory11.png",
                            Name = "Small Hand bag",
                            Price = 98f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 9,
                            Colour = "White",
                            Description = "Perfect gift to give to lovers of ducks!",
                            ImageURL = "Images/accessories/Accessory14.png",
                            Name = "Funny ducks",
                            Price = 65f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 10,
                            Colour = "Black & White",
                            Description = "Good, durable quality",
                            ImageURL = "Images/accessories/Accessory19.png",
                            Name = "Funny clothespin",
                            Price = 60f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 11,
                            Colour = "Brown",
                            Description = "Durable but easily removed glue",
                            ImageURL = "Images/accessories/Accessory17.png",
                            Name = "Funny sticker",
                            Price = 40f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 12,
                            Colour = "Black & Brown",
                            Description = "Beautiful leather wallet",
                            ImageURL = "Images/accessories/Accessory10.png",
                            Name = "Small, feminine wallet",
                            Price = 730f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 13,
                            Colour = "Green",
                            Description = "Comfortable cotton. One out of 10 girls recommend",
                            ImageURL = "Images/Clothes/clothing2.jpg",
                            Name = "Bright green dress",
                            Price = 350f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 14,
                            Colour = "Black",
                            Description = "Very comfortable and stretchy material",
                            ImageURL = "Images/Clothes/clothing3.jpg",
                            Name = "Beautiful black dinner dress",
                            Price = 1500f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 15,
                            Colour = "Black",
                            Description = "Sleek black boots with low heels and a zipper",
                            ImageURL = "Images/shoes/shoes16.png",
                            Name = "Black ankle boots",
                            Price = 2200f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 16,
                            Colour = "Black",
                            Description = "Durable, stretchy bracelet",
                            ImageURL = "Images/accessories/Accessory6.png",
                            Name = "Black bracelet",
                            Price = 250f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 17,
                            Colour = "White",
                            Description = "Make an impression, shine in your light",
                            ImageURL = "Images/Clothes/clothing8.jpg",
                            Name = "Shine bright dress",
                            Price = 350f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 18,
                            Colour = "White",
                            Description = "The manifestation of elegance",
                            ImageURL = "Images/Clothes/clothing4.jpg",
                            Name = "The flow dress",
                            Price = 500f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 19,
                            Colour = "Red",
                            Description = "Unleash your inner diva",
                            ImageURL = "Images/Clothes/clothing5.jpg",
                            Name = "The dress",
                            Price = 700f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 20,
                            Colour = "Burgundy",
                            Description = "Make the billion-dollar deal in this dress",
                            ImageURL = "Images/Clothes/clothing6.jpg",
                            Name = "Ultimate slay",
                            Price = 450f,
                            Quantity = 100,
                            Size = "Small"
                        },
                        new
                        {
                            ItemId = 21,
                            Colour = "Red",
                            Description = "Be the light of the dinner party",
                            ImageURL = "Images/Clothes/clothing7.jpg",
                            Name = "Dinner served",
                            Price = 625f,
                            Quantity = 100,
                            Size = "Small"
                        });
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PlacedByUsername")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PlacedOn")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PlacedByUsername");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Username");

                    b.HasIndex("CardId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entities.Utilities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryDescription = "Different kinds of clothing",
                            CategoryName = "Clothing"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryDescription = "Different kinds of Shoes",
                            CategoryName = "Shoes"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryDescription = "Different kinds of accessories",
                            CategoryName = "Accessories"
                        });
                });

            modelBuilder.Entity("Entities.Utilities.ItemCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId", "ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemCategories", (string)null);

                    b.HasData(
                        new
                        {
                            CategoryId = 2,
                            ItemId = 1
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = 2
                        },
                        new
                        {
                            CategoryId = 1,
                            ItemId = 3
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = 4
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = 5
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = 6
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = 7
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = 8
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = 9
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = 10
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = 11
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = 12
                        },
                        new
                        {
                            CategoryId = 1,
                            ItemId = 13
                        },
                        new
                        {
                            CategoryId = 1,
                            ItemId = 14
                        },
                        new
                        {
                            CategoryId = 2,
                            ItemId = 15
                        },
                        new
                        {
                            CategoryId = 3,
                            ItemId = 16
                        },
                        new
                        {
                            CategoryId = 1,
                            ItemId = 17
                        },
                        new
                        {
                            CategoryId = 1,
                            ItemId = 18
                        },
                        new
                        {
                            CategoryId = 1,
                            ItemId = 19
                        },
                        new
                        {
                            CategoryId = 1,
                            ItemId = 20
                        },
                        new
                        {
                            CategoryId = 1,
                            ItemId = 21
                        });
                });

            modelBuilder.Entity("CategoryItem", b =>
                {
                    b.HasOne("Entities.Utilities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Item", null)
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.DeliveryOption", b =>
                {
                    b.HasOne("Entities.Order", "Order")
                        .WithMany("DeliveryOptions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.HasOne("Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.User", "PlacedBy")
                        .WithMany()
                        .HasForeignKey("PlacedByUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("PlacedBy");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.HasOne("Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Entities.Utilities.ItemCategory", b =>
                {
                    b.HasOne("Entities.Utilities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Navigation("DeliveryOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
